<%@ CodeTemplate Language="C#" TargetLanguage="C#"  ResponseEncoding="UTF-8" Description="Generates a very simple business object." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
import request from '/@/utils/request';

/**
 * 以下为模拟接口地址，gitee 的不通，就换自己的真实接口地址
 *
 * （不建议写成 request.post(xxx)，因为这样 post 时，无法 params 与 data 同时传参）
 *
 * 后端控制菜单模拟json，路径在 https://gitee.com/lyt-top/vue-next-admin-images/tree/master/menu
 * 后端控制路由，isRequestRoutes 为 true，则开启后端控制路由
 * @method getAdminMenu 获取后端动态路由菜单(admin)
 * @method getTestMenu 获取后端动态路由菜单(test)
 */
export function use<%=GetName(SourceTable) %>Api() {
	return {
		getPage: (params?: object) => {
			return request({
				url: '/api/<%= GetNameLow(SourceTable) %>/getPage',
				method: 'get',
				params,
			});
		},
		add: (data: object) => {
			return request({
				url: '/api/<%= GetNameLow(SourceTable) %>/post',
				method: 'post',
				data,
			});
		},
		update: (data: object) => {
			return request({
				url: '/api/<%= GetNameLow(SourceTable) %>/put',
				method: 'put',
				data,
			});
		},
		delete: (id: string) => {
			return request({
				url: '/api/<%= GetNameLow(SourceTable) %>/delete/' + id,
				method: 'delete',
			});
		},
	};
}

<script runat="template">

public string GetNameLow(TableSchema table)
{
    string tname=GetName(table);
    string first=tname.Substring(0,1).ToLower();
    string end=tname.Substring(1);
    return first+end;
}

public string GetMemberVariableName(ColumnSchema column)
{
	//string propertyName = GetPropertyName(column);
	string propertyName = column.Name;
	string memberVariableName =  propertyName.ToLower();
	
	return memberVariableName;
}

public string GetJSMemberName(ColumnSchema column)
{
	//string propertyName = GetPropertyName(column);
	string propertyName = column.Name;
	string memberVariableName = propertyName.Substring(0, 1).ToLower() + propertyName.Substring(1);
	
	return memberVariableName;
}

public string GetIsDelete(ColumnSchemaCollection columns)
{
    for(int i=0;i<columns.Count;i++)
    {
        if(columns[i].Name.ToLower()=="isdeleted")
        {
            return ", ILogicDelete";
        }
    }
    return "";
}


public string GetPropertyName(ColumnSchema column)
{
	string propertyName = column.Name;
	
	if (propertyName == column.Table.Name + "Name") return "Name";
	if (propertyName == column.Table.Name + "Description") return "Description";
	
	if (propertyName.EndsWith("TypeCode")) propertyName = propertyName.Substring(0, propertyName.Length - 4);
	
	return propertyName;
}

public int GetPropertyNameLength(ColumnSchema column)
{
	return (GetPropertyName(column)).Length;
}
public int GetPropertyNameMaxLength()
{
	int ret = 0;
	foreach(ColumnSchema column in SourceTable.Columns)
	{
		ret = ret < GetPropertyNameLength(column)?GetPropertyNameLength(column):ret;
	}
	return ret;
}

public string GetFullName(TableSchema table)
{
    var tableName=table.Name;
    
    if(tableName.Contains("_"))
    {
        return tableName.Replace("_","");
    }
    else
        throw new Exception("数据库表命名错误！");
}
public string GetModuleName(TableSchema table)
{
    var tableName=table.Name;
    
    if(tableName.Contains("_"))
    {
        var mdName=tableName.Split('_')[0];
        return mdName.Substring(0,1).ToUpper()+mdName.Substring(1);
    }
    else
        throw new Exception("数据库表命名错误！");
}
public string GetMemberVariableDefaultValue(ColumnSchema column)
{
	if(column.IsPrimaryKeyMember)
	{
	    return "";
	}
	switch (column.DataType)
	{
		case DbType.Guid:
		{
			return "Guid.Empty";
		}
		case DbType.AnsiString:
		case DbType.AnsiStringFixedLength:
		case DbType.String:
		case DbType.StringFixedLength:
		{
			return "String.Empty";
		}
		default:
		{
			return "";
		}
	}
}

public string GetCSharpVariableType(ColumnSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;
    if(column.DataType==DbType.Binary)
    {
        return column.AllowDBNull?"byte?[]":"byte[]";
    }
    
	string tp="";
    string isNullTag="";
	switch (column.DataType)
	{
		case DbType.AnsiString:
            tp= "string" ;
            break;
		case DbType.AnsiStringFixedLength:
            tp= "string";
            break;
		case DbType.Boolean:
            tp= "bool";
            isNullTag="?";
            break;
		case DbType.Byte:
            tp= "byte";
            break;
		case DbType.Currency: 
            tp= "decimal";
            isNullTag="?";
            break;
		case DbType.Date:
            tp= "DateTime";
            isNullTag="?";
            break;
		case DbType.DateTime: 
            tp= "DateTime";
            isNullTag="?";
            break;
		case DbType.Decimal:
            tp= "decimal";
            isNullTag="?";
            break;
		case DbType.Double:
            tp= "decimal";
            isNullTag="?";
            break;
		case DbType.Guid: 
            tp= "Guid";
            break;
		case DbType.Int16: 
            tp= "short";
            isNullTag="?";
            break;
		case DbType.Int32: 
            tp= "int";            
            isNullTag="?";
            break;
		case DbType.Int64: 
            tp= "long";
            isNullTag="?";
            break;
		case DbType.Object: 
            tp= "object";
            isNullTag="?";
            break;
		case DbType.SByte: 
            tp= "bool";
                        isNullTag="?";
            break;
		case DbType.Single:
            tp= "float";
                        isNullTag="?";
            break;
		case DbType.String: 
            tp= "string";
            break;
		case DbType.StringFixedLength:
            tp= "string";
            break;
		case DbType.Time:
            tp= "TimeSpan";
            isNullTag="?";
            break;
		case DbType.UInt16: 
            tp= "ushort";
                        isNullTag="?";
            break;
		case DbType.UInt32: 
            tp= "uint";
                        isNullTag="?";
            break;
		case DbType.UInt64: 
            tp= "ulong";
                        isNullTag="?";
            break;
		case DbType.VarNumeric: 
            tp= "decimal";
            isNullTag="?";
            break;
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
    if(column.AllowDBNull)
        return tp+isNullTag;
    else
        return tp;
}

public string GetDataAnnotations(ColumnSchema column)
{
    
    string description=column.Description!=null?column.Description.Replace("\n","").Replace("\r",""):"";
    string attr="";//"[DataMember]";
	attr+=!column.AllowDBNull?"\r\n        [Required(ErrorMessage = \""+description+"是必须的，请先完善\")]]":"";
    attr+="\r\n        [Display(Name = \""+description+"\")]";
    if(column.IsUnique)
        attr+="\r\n        [Unique]";
        
    
	switch (column.DataType)
	{
		case DbType.AnsiString:
		case DbType.AnsiStringFixedLength:
        case DbType.String: 
		case DbType.StringFixedLength:
            attr+="\r\n        [StringLength("+column.Size+")]";
            break;
	}
    return attr;
}
public string GetReaderMethod(ColumnSchema column)
{
	switch (column.DataType)
	{
		case DbType.Byte:
		{
			return "GetByte";
		}
		case DbType.Int16:
		{
			return "GetInt16";
		}
		case DbType.Int32:
		{
			return "GetInt32";
		}
		case DbType.Int64:
		{
			return "GetInt64";
		}
		case DbType.AnsiStringFixedLength:
		case DbType.AnsiString:
		case DbType.String:
		case DbType.StringFixedLength:
		{
			return "GetString";
		}
		case DbType.Boolean:
		{
			return "GetBoolean";
		}
		case DbType.Guid:
		{
			return "GetGuid";
		}
		case DbType.Currency:
		case DbType.Decimal:
		{
			return "GetDecimal";
		}
		case DbType.DateTime:
		case DbType.Date:
		{
			return "GetDateTime";
		}
		case DbType.Binary:
		{
			return "GetBytes";
		}
		default:
		{
			return "__SQL__" + column.DataType;
		}
	}
}
	public string GetName(TableSchema table)
    {
		try			
		{
		if(table==null)
		{
		    return null;
		}
            string[] nameArray=  table.Name.Split('_');
            if(nameArray.Length<=1)
                return table.Name;
            
            string tabName="";
            for(var i=1;i<nameArray.Length;i++)
            {
                string tname=nameArray[i];
                string first=tname.Substring(0,1);
                string end=tname.Substring(1);
                
                
                tabName=tabName+first.ToUpper()+end;
                if(i!=nameArray.Length-1)              
                    tabName+="_";
                
            }
            return tabName;
		}
		catch(Exception ex)
		{
			throw new Exception(table.Name+ex.Message);
		}
    }
public override string GetFileName()
{
	return this.GetName(this.SourceTable) + ".cs";
}
</script>