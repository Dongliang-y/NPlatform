<%@ CodeTemplate Language="C#" TargetLanguage="Text"  ResponseEncoding="UTF-8"  Debug="True" Description="Template description here." %>
<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="General" Description="选择表" %>
<%@ Property Name="ProjectName" Type="String" Category="General" Description="项目名称" %>
<%@ Property Name="Overrite" Type="Boolean" Default="true" Category="文件处理" Description="是否覆写" %>
<%@ Property Name="ClearAll" Type="Boolean" Default="false" Category="文件处理" Description="清理所有生成的代码" %>
<%@ Property Name="DomainMode" Type="Boolean" Default="true" Category="高级特性" Description="基于领域驱动模式" %>
<%@ Property Name="ORMSelect"  Type="ORMType" Category="高级特性" Description="ORM选择" %> 
<%@ Property Name="IsPartial"  Type="Boolean"  Default="true" Category="高级特性" Description="以partial风格生成 *.partial.cs代码文件，避免覆盖用户增加的文件。" %> 
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %> 
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Design" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>

<% if(!Directory.Exists(OutputDirectory)) Directory.CreateDirectory(OutputDirectory); %>
Easy Framework BuildScripts.
by Dongliang Yi.

<% 

TableSchemaCollection Tables=SourceTables;
//ViewSchemaCollection Views=GetViewCollection(SourceData);
//过滤掉不正常的表格
    Tables = FilterTables(Tables);

    var RepositoryDirectory="EFRepository";//ORMSelect
    switch(ORMSelect)
    {
        case ORMType.EntityFrameWork:
            RepositoryDirectory="EFRepository";
            break;
        case ORMType.Dapper:
            RepositoryDirectory="DapperRepository";
            break;
    }

    string IRepositoriesDIC = OutputDirectory + "\\"+ProjectName+".Domains\\IRepositories\\";
    string RepositoriesDIC = OutputDirectory + "\\"+ProjectName+"."+RepositoryDirectory+"\\";

    string EntityDIC = OutputDirectory + "\\"+ProjectName+".Domains\\Entity\\";

    string IServiceDIC = OutputDirectory + "\\"+ProjectName+".Domains\\IService\\";
    string ServiceDIC = OutputDirectory + "\\"+ProjectName+".Domains\\Services\\";

    string DtoDIC = OutputDirectory + "\\"+ProjectName+".Domains\\Dto\\";


        //Load Template
    CodeTemplate IRepositoriesTemplate = GetCodeTemplate("IRepositories.cst");
    CodeTemplate RepositoriesTemplate = GetCodeTemplate("Repository.cst");

    CodeTemplate EntityTemplate = GetCodeTemplate("MySqlEntity.cst");
    CodeTemplate ITemplate = GetCodeTemplate("IEntity.cst");

    // service 
    CodeTemplate IServiceTemplate=GetCodeTemplate("Iservice.cst");
    CodeTemplate ServiceTemplate=GetCodeTemplate("service.cst");

    // Dto 对象

     CodeTemplate DtoTemplate=GetCodeTemplate("Dto.cst");

    if(ClearAll)
    {
           for (int i = 0; i < Tables.Count; i++)
           {
               var entity=EntityDIC+ GetModuleName(Tables[i]);
               if(System.IO.Directory.Exists(entity))
               {
                   System.IO.Directory.Delete(entity,true);
               }
               
               var IResp=IRepositoriesDIC+ GetModuleName(Tables[i]);
                if(System.IO.Directory.Exists(IResp))
               {
                   System.IO.Directory.Delete(IResp,true);
               }
               
               var Resp=RepositoriesDIC+ GetModuleName(Tables[i]);
                if(System.IO.Directory.Exists(Resp))
               {
                   System.IO.Directory.Delete(Resp,true);
               }
               
               
               var Isv=IServiceDIC+ GetModuleName(Tables[i]);
                if(System.IO.Directory.Exists(Isv))
               {
                   System.IO.Directory.Delete(Isv,true);
               }
               
               var Svc=ServiceDIC+ GetModuleName(Tables[i]);
                if(System.IO.Directory.Exists(Svc))
               {
                   System.IO.Directory.Delete(Svc,true);
               }
               
               var dto=DtoDIC+ GetModuleName(Tables[i]);
                if(System.IO.Directory.Exists(dto))
               {
                   System.IO.Directory.Delete(dto,true);
               }
               
           }
    }
                var fileExt="";
            if(IsPartial)
            {
                fileExt=".partial";
            }
    //Render Files
    for (int i = 0; i < Tables.Count; i++)
    {  
        //Dto
		try
		{
			//实 体
			RenderFileUsingProperties(EntityDIC+ GetModuleName(Tables[i])+"\\"+ GetName(Tables[i]) +fileExt+ ".cs",Overrite,ref EntityTemplate,Tables[i]);
            //实 体模块接口
			RenderFileUsingProperties(EntityDIC+ GetModuleName(Tables[i])+"\\"+"I"+ GetModuleName(Tables[i])+fileExt + ".cs",Overrite,ref ITemplate,Tables[i]); 
            
            
            //服务\Dto
            var name=Tables[i].Name;
             var count=Regex.Matches(name, "_").Count;
            
            // 领域驱动模式下，从表的仓储、服务Dto都不生成。
            if(DomainMode&&count>11)
            {
                continue;
            }

            //仓储
			RenderFileUsingProperties(IRepositoriesDIC+ GetModuleName(Tables[i])+"\\"+ "I"+GetName(Tables[i]) + "Repository"+fileExt+".cs",
            Overrite,ref IRepositoriesTemplate,Tables[i]);
			RenderFileUsingProperties(RepositoriesDIC+ GetModuleName(Tables[i])+"\\"+ GetName(Tables[i]) + "Repository"+fileExt+".cs",Overrite,ref RepositoriesTemplate,Tables[i]);
            
			RenderFileUsingProperties(IServiceDIC+ GetModuleName(Tables[i])+"\\"+"I"+ GetName(Tables[i]) + "Service"+fileExt+".cs",Overrite,ref IServiceTemplate,Tables[i]); 
			RenderFileUsingProperties(ServiceDIC+ GetModuleName(Tables[i])+"\\"+GetName(Tables[i]) + "Service"+fileExt+".cs",Overrite,ref ServiceTemplate,Tables[i]); 
            
            RenderFileUsingProperties(DtoDIC+ GetModuleName(Tables[i])+"\\"+GetName(Tables[i]) + "Dto"+fileExt+".cs",Overrite,ref DtoTemplate,Tables[i]); 
            
		}catch(Exception ex)
		{
			%>表<%=Tables[i].Name%>出现错误，已跳过，请查验。<%=ex.ToString()%><%
			continue;
		}
    }
    
%>

Total <%=Tables.Count %>  Tables completed!
***<h2>注意</h2>***
1.Overrite 选项将覆盖历史生成的文件。
2.ClearAll 将删除输出目录下的所有文件，只在项目初始化时使用，后续更新生成请去除此选项。
3.DomainMode 生成基于领域驱动模式的代码（目前只有此项可选。。。。）
4.ORMSelect ORM选择（目前支持Dapper，EF）
5.IsPartial 以partial风格生成 *.partial.cs代码文件，避免覆盖用户增加的文件。比如用户的文件 UserService.cs,生成文件 UserService.partial.cs ,这样Overrite 选项不会覆盖用户写的代码。
<script runat="template">	
    /// <summary>

/// 定义一个下拉列表的枚举

/// </summary>

public enum ORMType 
{
    EntityFrameWork,
    Dapper
}

    #region Output
    private string _outputDirectory = String.Empty;
	
    [Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))] 
	[CodeTemplateProperty(CodeTemplatePropertyOption.Optional)]
	[Category("General")]
	[Description("The directory to output the results to.")]
	[DefaultValue("")]
	public string OutputDirectory 
	{ 
		get
		{
			if (_outputDirectory.Length == 0)
			{
				return @"d:\NPlatform";
			}
			else
			{
				return _outputDirectory;
			}
		}
		set
		{
			if (value.EndsWith("\\")) value = value.Substring(0, value.Length - 1);
			_outputDirectory = value;
		} 
	}
	#endregion
#region GetTabs,Views
public TableSchemaCollection GetTableCollection(DatabaseSchema dataBase)
{
    
    TableSchemaCollection tables = new TableSchemaCollection(dataBase.Tables);
    return tables;
}
public ViewSchemaCollection GetViewCollection(DatabaseSchema dataBase)
{
    ViewSchemaCollection views = new ViewSchemaCollection(dataBase.Views);
    return views;
}
    #endregion
    
#region Methods
	#region Get Template
	public  CodeTemplate GetCodeTemplate(string TemplateName)
	{		
		//CodeTemplate template=null;
		CodeTemplateCompiler compiler = new CodeTemplateCompiler(this.CodeTemplateInfo.DirectoryName+TemplateName); 
		compiler.CodeTemplateInfo.ToString();
		compiler.Compile(); 
		if (compiler.Errors.Count == 0) 
		{ 
			return compiler.CreateInstance();
		} 
		else 
		{ 
			System.Text.StringBuilder errorMessage = new System.Text.StringBuilder();				
			for (int i = 0; i < compiler.Errors.Count; i++) 
			{
				errorMessage.Append(compiler.Errors[i].ToString()).Append("\n");
			} 
			throw new ApplicationException(errorMessage.ToString());
		} 
		      
	}
	#endregion
	
	#region Render File
	/// Copies all properties to a template
	/// Renders the file 
	/// NB. the overrite property
	public void RenderFileUsingProperties(string fullPath, bool overrite, ref CodeTemplate template)
	{
		if( overrite || (!File.Exists(fullPath)) )
		{
                Response.Write(fullPath+"\r\n"); 
			CopyPropertiesTo(template);
			template.RenderToFile(fullPath, overrite);
		}
	}
	
		/// Copies all properties to a template
	/// Renders the file 
	/// NB. the overrite property
	/// Set Property SourceTable
	public void RenderFileUsingProperties(string fullPath, bool overrite, ref CodeTemplate template,object SourceTable)
	{
		if( overrite || (!File.Exists(fullPath)) )
		{
                            Response.Write(fullPath+"\r\n"); 
            System.IO.FileInfo fi=new System.IO.FileInfo(fullPath);
            if(!fi.Directory.Exists)
                fi.Directory.Create();
            
			CopyPropertiesTo(template);
			template.SetProperty("SourceTable",SourceTable);
			template.RenderToFile(fullPath, overrite);
		}
	}
		/// Copies all properties to a template
	/// Renders the file 
	/// NB. the overrite property
	/// Set Property SourceTable
	public void RenderFileUsingProperties(string fullPath, bool overrite, ref CodeTemplate template,TableSchemaCollection Tables,ViewSchemaCollection Views)
	{
		if( overrite || (!File.Exists(fullPath)) )
		{
            Response.Write(fullPath+"\r\n"); 
            System.IO.FileInfo fi=new System.IO.FileInfo(fullPath);
            if(!fi.Directory.Exists)
                fi.Directory.Create();
            
			CopyPropertiesTo(template);
			template.SetProperty("Tables",Tables);
            template.SetProperty("Views",Views);
			template.RenderToFile(fullPath, overrite);
		}
	}
	/// Copies all properties to a template
	/// Renders the file  using the preserve regions merge stratagy
	public void MergeFileUsingPreserve(string fullPath, ref CodeTemplate template)
	{		
		CodeSmith.Engine.PreserveRegionsMergeStrategy preserveRegionsMergeStrategy = new PreserveRegionsMergeStrategy();
		preserveRegionsMergeStrategy.Language = "C#";
		preserveRegionsMergeStrategy.RegionNameRegex = "PRESERVE";
		CopyPropertiesTo(template);
		template.RenderToFile(fullPath,preserveRegionsMergeStrategy);
	}
	/// Copies all properties to a template
	/// Renders the file  using the preserve regions merge stratagy
	/// Set Property SourceTable
	public void MergeFileUsingPreserve(string fullPath, ref CodeTemplate template,TableSchema SourceTable)
	{		
		CodeSmith.Engine.PreserveRegionsMergeStrategy preserveRegionsMergeStrategy = new PreserveRegionsMergeStrategy();
		preserveRegionsMergeStrategy.Language = "C#";
		preserveRegionsMergeStrategy.RegionNameRegex = "PRESERVE";
		CopyPropertiesTo(template);
		template.SetProperty("SourceTable",SourceTable);
		template.RenderToFile(fullPath,preserveRegionsMergeStrategy);
	}
	/// Copies all properties to a template
	/// Renders the file  using the Insert Region merge strategy
	public void MergeFileUsingInsert(string fullPath, ref CodeTemplate template)
	{		
		CodeSmith.Engine.InsertRegionMergeStrategy mergeStrategy = new InsertRegionMergeStrategy();
		mergeStrategy.Language = "C#";
		mergeStrategy.RegionName = "PRESERVE";
		CopyPropertiesTo(template);
		template.RenderToFile(fullPath,mergeStrategy);
		
	}
	/// Copies all properties to a template
	/// Renders the file  using the Insert Region merge strategy
	/// Set Property SourceTable
	public void MergeFileUsingInsert(string fullPath, ref CodeTemplate template,object SourceTable)
	{		
		CodeSmith.Engine.InsertRegionMergeStrategy mergeStrategy = new InsertRegionMergeStrategy();
		mergeStrategy.Language = "C#";
		mergeStrategy.RegionName = "PRESERVE";
		CopyPropertiesTo(template);
		template.SetProperty("SourceTable",SourceTable);
		template.RenderToFile(fullPath,mergeStrategy);
		
	}
	#endregion
#endregion	

#region Inner Classes	
	#region TableUtilities Class

		public  bool SkipTable(TableSchema table)
		{
			return (!table.HasPrimaryKey||table.PrimaryKey==null|| table.Columns.Count < 2);
		}
		public  TableSchemaCollection FilterTables(TableSchemaCollection tables)
        {			
            TableSchemaCollection filtered = new TableSchemaCollection();
            foreach(TableSchema table in tables) 
            {
                if(!SkipTable(table)) filtered.Add(table);
                else
                {
                   Response.Write(table.Name+" 缺少主键\r\n"); 
                }
            }
            return filtered;
        }
	
	public static string GetName(TableSchema table)
    {
		try			
		{
		if(table==null)
		{
		    return null;
		}
            string[] nameArray=  table.Name.Split('_');
            if(nameArray.Length<=1)
                return table.Name;
            
            string tabName="";
            for(var i=1;i<nameArray.Length;i++)
            {
                string tname=nameArray[i];
                string first=tname.Substring(0,1);
                string end=tname.Substring(1);
                
                
                tabName=tabName+first.ToUpper()+end;
                if(i!=nameArray.Length-1)              
                    tabName+="_";
                
            }
            return tabName;
		}
		catch(Exception ex)
		{
			throw new Exception(table.Name+ex.Message);
		}
    }
	public static string GetName(ViewSchema table)
    {
		
		try			
		{
		if(table==null)
		{
		    return null;
		}
            string[] nameArray=  table.Name.Split('_');
            if(nameArray.Length<=1)
                return table.Name;
            
            string tabName="";
            for(var i=1;i<nameArray.Length;i++)
            {
                string tname=nameArray[i];
                string first=tname.Substring(0,1);
                string end=tname.Substring(1);
                
                
                tabName=tabName+first.ToUpper()+end;
                if(i!=nameArray.Length-1)              
                    tabName+="_";
                
            }
            return tabName;
		}
		catch(Exception ex)
		{
			throw new Exception(table.Name+ex.Message);
		}
    }
	public static string GetModuleName(ViewSchema table)
    {
		
		if(table==null)
		{
		    return null;
		}
		var name=  table.Name.Split('_')[0];
        return name.Substring(0,1).ToUpper()+name.Substring(1);
    }	
	public static string GetModuleName(TableSchema table)
    {
		
		if(table==null)
		{
		    return null;
		}
		var name=  table.Name.Split('_')[0];
        return  name.Substring(0,1).ToUpper()+name.Substring(1);
    }
	#endregion
#endregion	
</script>